{"version":3,"sources":["main.js"],"names":[],"mappingsfile":"main.js","sourcesContent":["/**\n * Set up ajax request header for laravel\n */\n$.ajaxSetup({\n    headers: {\n        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    },\n    statusCode : {\n        405 : function() {\n            swal('Warning', 'Please bind your account with IVLE', 'warning');\n        },\n        401 : function() {\n            swal('Error', 'Login Required. More info after login', 'error');\n        }\n    }\n});\n\n\n/**\n * scroll to the element\n *\n * @param event\n * @param element_id\n */\nfunction scroll_to(element_id, event) {\n    if (event) {\n        event.preventDefault();\n    }\n\n    $('html,body').animate({scrollTop: $('#' + element_id).offset().top - 200}, 1000);\n}\n\n/**\n * toggle display of the element with id\n *\n * @param id\n */\nfunction toggle(id, event) {\n    if (event) {\n        event.preventDefault();\n    }\n    $('#' + id).toggle();\n}\n\n/**\n * Once click of the vote button than show the vote up and vote down button\n */\nfunction vote_button_trigger(clickObject, show_id) {\n    $(clickObject).hide();\n    $('#' + show_id).show();\n}\n\n/**\n * Send AJAX request to subscribe a topic\n *\n * @param topic_id\n */\nfunction subscribeTopic(topic_id, op, callback) {\n    $.post('/subscribe/topic/' + topic_id, {\n        op : op\n    }, function(results) {\n        if (callback && typeof callback == \"function\") {\n            callback(results);\n        }\n    })\n}\n\n/**\n * Send ajax call to subscribe a question\n *\n * @param event\n * @param clickObject\n * @param topic_id\n */\nfunction topics_subscribe(event, clickObject, topic_id) {\n    event.preventDefault();\n    var $click = $(clickObject);\n    if ($click.hasClass('active')) {\n        // is already subscribed\n        subscribeTopic(topic_id, 'unsubscribe', function() {\n            // remove class\n            $click.removeClass('active');\n            // show subscribe text\n            $click.find('span:nth-child(1)').show();\n            $click.find('span:nth-child(2)').text('');\n            $click.find('span:nth-child(2)').text('Subscribe')\n        });\n    } else {\n        // current operation is subscribe the topic\n        subscribeTopic(topic_id, null, function() {\n            // add active class\n            $click.addClass('active');\n            // show unsubscribe text\n            $click.find('span:nth-child(1)').hide();\n            $click.find('span:nth-child(2)').text('');\n            $click.find('span:nth-child(2)').text('Unsubscribe')\n        });\n    }\n}\n\n/**\n * trigger subscribe button in specific topic page\n *\n * @param clickObject\n * @param topic_id\n */\nfunction topic_show_subscribe(clickObject, topic_id) {\n    var $button = $(clickObject);\n    if ($button.hasClass('btn-success')) {\n        // has not subscribed yet\n        subscribeTopic(topic_id, null, function() {\n            $button.html('Unsubscribe');\n            $button.removeClass('btn-success');\n            $button.addClass('btn-warning');\n        });\n    } else {\n        // has subscribed\n        subscribeTopic(topic_id, 'unsubscribe', function() {\n            $button.html('Subscribe');\n            $button.removeClass('btn-warning');\n            $button.addClass('btn-success');\n        });\n    }\n}\n\n/**\n * Send ajax request to subscribe a question\n *\n * @param question_id\n * @param op\n * @param callback\n */\nfunction subscribeQuestion(question_id, op, callback) {\n    $.post('/subscribe/question/' + question_id, {\n        op : op\n    }, function(results) {\n        if (callback && typeof callback == \"function\") {\n            callback(results);\n        }\n    })\n}\n\n/**\n * Send ajax request to subscribe a user\n *\n * @param user_id\n * @param op\n * @param callback\n */\nfunction subscribeUser(user_id, op, callback) {\n    $.post('/subscribe/user/' + user_id, {\n        op : op\n    }, function(results) {\n        if (callback && typeof callback == \"function\") {\n            callback(results);\n        }\n    })\n}\n\n/**\n * Subscribe user by click button\n * @param clickObject\n * @param user_id\n */\nfunction user_button_subscribe(clickObject, user_id, textID) {\n    var $button = $(clickObject);\n    if ($button.hasClass('btn-success')) {\n        // has not subscribed yet\n        subscribeUser(user_id, null, function(results) {\n            $button.html('Unsubscribe');\n            $button.removeClass('btn-success');\n            $button.addClass('btn-default');\n            if (textID) {\n                $('#' + textID).html(results.numSubscriber);\n            }\n        });\n    } else {\n        // has subscribed\n        subscribeUser(user_id, 'unsubscribe', function(results) {\n            $button.html('Subscribe');\n            $button.removeClass('btn-default');\n            $button.addClass('btn-success');\n            if (textID) {\n                $('#' + textID).html(results.numSubscriber);\n            }\n        });\n    }\n}\n\n/**\n * Send ajax request to subscribe a bookmark\n *\n * @param bookmark_id\n * @param op\n * @param callback\n */\nfunction subscribeBookmark(bookmark_id, op, callback) {\n    $.post('/subscribe/bookmark/' + bookmark_id, {\n        op : op\n    }, function(results) {\n        if (callback && typeof callback == \"function\") {\n            callback(results);\n        }\n    })\n}\n\n\n/**\n * AJAX send operation to server\n *\n * @param notification_id\n * @param op\n * @param callback\n */\nfunction notificationOperation(notification_id, op, callback) {\n    $.post('/notification/operation', {\n        op : op,\n        id : notification_id\n    }, function(results) {\n        if (callback && typeof callback == \"function\") {\n            callback(results);\n        }\n    })\n}\n\n/**\n * Highlight a element, if rollback is true, after two second, it will auto 'dehighlight'.\n *\n * @param elementID\n * @param rollback(optional)\n */\nfunction highlight(elementID, rollback) {\n    $('#' + elementID).addClass('highlight');\n    // hightlight 2 second\n    if (rollback) {\n        setTimeout(function(){\n            $('#' + elementID).removeClass('highlight');\n        }, 2000);\n    }\n\n}\n\n/**\n * Highlight the keyword when the search is done\n *\n * @param text\n * @param keyword\n */\nfunction highlight_keyword(text, keyword) {\n    keyword = keyword.replace('$', '\\\\$');\n    keyword = keyword.replace('(', '\\\\(');\n    keyword = keyword.replace(')', '\\\\)');\n    keyword = keyword.replace('*', '\\\\*');\n    keyword = keyword.replace('+', '\\\\+');\n    keyword = keyword.replace('.', '\\\\.');\n    keyword = keyword.replace('[', '\\\\[');\n    keyword = keyword.replace(']', '\\\\]');\n    keyword = keyword.replace('?', '\\\\?');\n    keyword = keyword.replace('\\\\', '\\\\');\n    keyword = keyword.replace('^', '\\\\^');\n    keyword = keyword.replace('{', '\\\\{');\n    keyword = keyword.replace('}', '\\\\}');\n    keyword = keyword.replace('|', '\\\\|');\n    var reg = new RegExp(keyword, 'gi');\n    return text.replace(reg, function(str) {return '<em>'+str+'</em>'});\n}\n\n\n/**\n * Auto complete for select user\n */\nfunction user_name_autocomplete(id) {\n    $('#' + id).select2({\n        width: '100%',\n        dropdownAutoWidth : true,\n        placeholder: 'select peoples',\n        minimumInputLength : 1,\n        ajax: {\n            url: \"/api/autocomplete\",\n            dataType: 'json',\n            method: 'POST',\n            delay: 250,\n            data: function (params) {\n                return {\n                    queries: [{\n                        type : 'people',\n                        term : params.term, // search term\n                        max_match: 10,\n                        use_similar: 0,\n                    }]\n                };\n            },\n            processResults: function(data, params) {\n                var process_data = [];\n                $.each(data, function(index, item) {\n                    process_data.push({\n                        id : item.id,\n                        text : item.name\n                    });\n                });\n                return {\n                    results : process_data\n                }\n            }\n        },\n    });\n}\n\n/**\n * auto complete for topics\n * @param id\n */\nfunction topic_autocomplete(id) {\n    $('#' + id).select2({\n        width: '100%',\n        dropdownAutoWidth : true,\n        placeholder: 'Please select some topics',\n        minimumInputLength : 1,\n        ajax: {\n            url: \"/api/autocomplete\",\n            dataType: 'json',\n            method: 'POST',\n            delay: 250,\n            data: function (params) {\n                return {\n                    queries: [{\n                        type : 'topic',\n                        term : params.term, // search term\n                        max_match: 10,\n                        use_similar: 0,\n                    }]\n                };\n            },\n            processResults: function(data, params) {\n                var process_data = [];\n                $.each(data, function(index, item) {\n                    process_data.push({\n                        id : item.id,\n                        text : item.name\n                    });\n                });\n                return {\n                    results : process_data\n                }\n            }\n        },\n    });\n}\n\n/**\n * Bind the upload button with event\n */\nfunction cropImage(img_id, aspectRatio, callback) {\n    // Import image\n    var $inputImage = $('#' + img_id + '_upload');\n    var $image = $('#' + img_id);\n    var URL = window.URL || window.webkitURL;\n    var blobURL;\n\n    $image.cropper({\n        aspectRatio: aspectRatio,\n        crop: function(e) {\n            // Output the result data for cropping image.\n\n        },\n        viewMode : 0,\n        minContainerWidth : '500',\n        minContainerHeight : '300'\n    });\n\n    if (URL) {\n        $inputImage.change(function () {\n            var files = this.files;\n            var file;\n\n            if (!$image.data('cropper')) {\n                return;\n            }\n\n            if (files && files.length) {\n                file = files[0];\n\n                if (/^image\\/\\w+$/.test(file.type)) {\n                    blobURL = URL.createObjectURL(file);\n                    $image.one('built.cropper', function () {\n\n                        // Revoke when load complete\n                        URL.revokeObjectURL(blobURL);\n                    }).cropper('reset').cropper('replace', blobURL);\n                    $inputImage.val('');\n                } else {\n                    window.alert('Please choose an image file.');\n                }\n            }\n        });\n    } else {\n        $inputImage.prop('disabled', true).parent().addClass('disabled');\n    }\n\n    // reset button\n    $('#' + img_id + '_reset').click(function() {\n        $image.cropper('reset');\n    });\n\n    // left rotate button\n    $('#' + img_id + '_left_rotate').click(function() {\n        $image.cropper('rotate', -45);\n    });\n\n    // right rotate button\n    $('#' + img_id + '_right_rotate').click(function() {\n        $image.cropper('rotate', 45);\n    });\n\n\n    // bring the upload modal to the front\n    $('#' + img_id + '_modal').on('show.bs.modal', function (e) {\n        console.log(1);\n        $(this).css('z-index', 100002);\n    });\n\n\n    var $uploadClick = $('#' + img_id + '_upload_click');\n    $uploadClick.click(function() {\n        $uploadClick.prop('disabled', true);\n        $uploadClick.html('Uploading..');\n\n\n        var id = $uploadClick.data('id');\n        var type = $uploadClick.data('type');\n        var url = $uploadClick.data('url');\n\n        $image.cropper('getCroppedCanvas').toBlob(function (blob) {\n            var formData = new FormData();\n\n            formData.append('croppedImage', blob);\n            formData.append('id', id);\n            formData.append('type', type);\n\n            $.ajax(url, {\n                method: \"POST\",\n                data: formData,\n                processData: false,\n                contentType: false,\n                success: function (results) {\n                    if (callback && typeof callback == \"function\") {\n                        callback(results);\n                    } else {\n                        swal({\n                            title : \"Upload Success\",\n                            text : \"The picture has uploaded!\",\n                            type : \"success\"\n                        }, function() {\n                            window.location.reload();\n                        });\n                    }\n                    $uploadClick.prop('disabled', false);\n                    $uploadClick.html('Upload');\n                },\n                error: function () {\n                    swal(\"Upload Error\", \"Sever post a question :(\", \"error\");\n                    $uploadClick.prop('disabled', false);\n                    $uploadClick.html('Upload');\n                }\n            });\n        });\n\n    });\n}\n\n/**\n * Set all <img> tag under element `id` with `img-responsive`\n *\n * @param id\n */\nfunction imgResponsiveIn(id) {\n    $('#' + id).find('img').each(function() {\n        if (!$(this).hasClass('img-responsive')) {\n            $(this).addClass('img-responsive');\n        }\n    });\n\n}\n\n/**\n * TinyMCE editor\n *\n * @param textareaID\n * @param initcallback\n */\nfunction tinyMCEeditor(textareaID, initcallback) {\n    // cannot find the element.\n    if ($('#' + textareaID).length == 0) return;\n    // init\n    var upload_callback_helper = null;\n    var upload_callback = function(result) {\n        upload_callback_helper(result.url);\n        $('#crop_img_' + textareaID + '_modal').modal('hide');\n    };\n    cropImage('crop_img_' + textareaID , NaN, upload_callback);\n    tinymce.init({\n        menubar : false,\n        selector: '#' + textareaID,\n        paste_as_text: true,\n        browser_spellcheck: true,\n        plugins: 'code advlist autolink link image table media codesample fullscreen paste',\n        toolbar: ['code | undo redo | bold italic underline | blockquote codesample bullist numlist math | link image media | fullscreen',],\n        relative_urls : false,\n        remove_script_host : false,\n        convert_urls : true,\n        elementpath : false,\n        setup: function (editor) {\n            editor.on('FullscreenStateChanged', function(e) {\n                if (e.state) {\n                    // hide nav bar when have fullscreen mode\n                    $('.navbar').fadeOut();\n                } else {\n                    $('.navbar').show();\n                }\n            });\n\n            // add Formular editor\n            editor.addButton('math', {\n                text: 'Equation',\n                icon: false,\n                onclick: function () {\n                    // set active\n                    tinyMCE.setActive(editor);\n                    // call tex editor with empty formula\n                    callTexEditor('');\n                }\n            });\n\n            editor.on('dblclick', function(ed) {\n                if ($(ed.target).data('type') == \"tex\") {\n                    callTexEditor(decodeURIComponent($(ed.target).data('value')));\n                }\n            });\n\n            editor.on('init', function(ed) {\n                tinyMCEAutoSave(textareaID);\n\n                if (initcallback && typeof initcallback == \"function\") {\n                    initcallback(editor);\n                }\n            });\n\n        },\n        // increase the font-size\n        content_css : '/js/tinymce/content.css',\n        // for upload image\n        file_picker_callback: function(callback, value, meta) {\n            // Provide image and alt text for the image dialog\n            if (meta.filetype == 'image') {\n                upload_callback_helper = callback;\n                $('#crop_img_' + textareaID + '_modal').modal('show');\n            }\n        },\n        file_picker_types: 'image'\n    });\n}\n\n/**\n * Auto save process for tinyMCE\n * @param editor\n */\nfunction tinyMCEAutoSave(editor) {\n    $(tinymce.get(editor).editorContainer)\n        .find('.mce-statusbar')\n        .find('.mce-container-body')\n        .prepend('<div class=\"mce-flow-layout-item mce-path\"><div class=\"mce-path-item\" id=\"autosave_' + editor + '\"></div></div>');\n    var $message = $('#autosave_' + editor);\n    var $editor = tinymce.get(editor);\n    var offset = 30;\n    var count = offset;\n    var preContent = \"\";\n\n    var autosaveInterval = setInterval(function() {\n        console.log(count);\n        if (!$('#' + editor).data('autosave')) {\n            count = offset;\n            return ;\n        }\n\n        // generate button\n        var $a_tag = $('<a></a>');\n        $a_tag.click(function(e) {\n            e.preventDefault();\n            autosave();\n        });\n        $a_tag.css('margin-right', '8px');\n        // add cancel button\n\n        $a_tag.html('Save Draft');\n        $message.html($a_tag);\n\n        if (count == 0) {\n            var $div = $('<div>' + $editor.getContent() + '</div>');\n            if ($div.text().replace(\" \", \"\").length > 5 || $div.find('img').length > 0) {\n                // autosave 5 character above\n                autosave();\n            }\n            count = offset;\n        } else if (count < 5) {\n            $a_tag.html('Save Draft(' + count + ')');\n\n\n            // count down generate cancel button\n            var $a_cancel = $('<a></a>');\n            $a_cancel.addClass('text-danger margin-top');\n            $a_cancel.html('Cancel');\n            $a_cancel.click(function(e) {\n                e.preventDefault();\n                count = offset;\n            });\n            $message.append($a_cancel);\n        }\n\n        count--;\n    }, 1000);\n\n    function autosave() {\n        var $postData = $('[data-type=\"' + editor + '_draft\"]');\n\n        // determine if the data changed\n        var flag = false;\n        $postData.each(function(index, item) {\n            var value = $(this).data('value') ? $(this).data('value') : $(this).val();\n            if (!equal(preContent[index], value)) {\n                flag = true || flag;\n            }\n        });\n\n        // the editor content changed\n        flag = flag || ($editor.getContent() != preContent[preContent.length - 1]);\n\n        if (flag) {\n            // only change then post draft\n            var request = {};\n            $postData.each(function() {\n                if ($(this).data('value')) {\n                    request[$(this).data('key')] = $(this).data('value');\n                } else {\n                    request[$(this).data('key')] = $(this).val();\n                }\n            });\n\n            request['text'] = changeImageToTex($editor.getContent());\n\n            $.post($('#' + editor).data('draft_url'), request, function(results) {\n                $('#' + editor + '_draft_id').data('value', results.id);\n                $('#' + editor + '_draft_id').val(results.id);\n                $message.html('Saved');\n            })\n                .fail(function(error) {\n                    $.each(error.responseJSON, function(index, value) {\n                        showError('_' + index, true);\n                    });\n                });\n        }\n\n        count = offset;\n\n        // backup previous content\n        preContent = [];\n        $postData.each(function(index, item) {\n            var value = $(this).data('value') ? $(this).data('value') : $(this).val();\n            preContent[index] = value;\n        });\n        preContent.push($editor.getContent());\n    }\n}\n\n\n\n/**\n * Bind data-toggle hide/show event\n */\nfunction bindHideShow() {\n    $('body').on('click', '[data-toggle=\"hide\"]', function(e) {\n        e.preventDefault();\n\n        if ($(this).data('hide')) {\n            $('#' + $(this).data('hide')).hide();\n        }\n\n        if ($(this).data('show')) {\n            $('#' + $(this).data('show')).show();\n        }\n\n    });\n}\n\n/**\n * Show error div. (lasted for 2 seconds)\n * @param base_id\n */\nfunction showError(base_id, autoHide) {\n    if (autoHide) {\n        // last for 2 second\n        $('#' + base_id + '_error').show();\n        setTimeout(function() {\n            $('#' + base_id + '_error').fadeOut();\n        }, 2000);\n    } else {\n        // show\n        $('#' + base_id + '_error').show();\n    }\n\n}\n\n// bind expend button\n$(function() {\n    bindHideShow();\n});\n\n/**\n * Check if two things are equal\n *\n * @param a\n * @param b\n * @returns {boolean}\n */\nfunction equal(a1, a2) {\n    return a1 === a2 || (\n            a1 !== null && a2 !== null &&\n            $.isArray(a1) && $.isArray(a2) &&\n            a1.length === a2.length &&\n            a1\n                .map(function (val, idx) { return val === a2[idx]; })\n                .reduce(function (prev, cur) { return prev && cur; }, true)\n        );\n}\n\n/**\n * Show point effect\n * @param $integer\n */\nfunction pointUI(integer) {\n    var $UI = $('#_point_operation');\n    $UI.css('opacity', 0);\n    $UI.html(integer > 0 ? '+' + integer : integer);\n    $UI.css('top', '60px');\n    $UI.animate({\n        opacity : 1,\n        top : '30px',\n    }, 400, 'swing', function() {\n        setTimeout(function() {\n            $UI.animate({\n                opacity : 0,\n                top : 0,\n            }, 200, 'swing', null);\n        }, 400);\n    });\n}\n\n/**\n * Fix for boostrap modal using tinymce\n */\n$(function() {\n    // Prevent Bootstrap dialog from blocking focusin\n    $(document).on('focusin', function(e) {\n        if ($(e.target).closest(\".mce-window\").length) {\n            e.stopImmediatePropagation();\n        }\n    });\n});\n\n"],"sourceRoot":"/source/"}